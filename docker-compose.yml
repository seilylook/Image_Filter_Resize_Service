services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
      - ./logs/zookeeper:/var/log/zookeeper
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - data-platform

  kafka1:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_TOOLS_LOG4J_LOGLEVEL: INFO
    volumes:
      - kafka1-data:/var/lib/kafka/data
      - ./logs/kafka1:/var/log/kafka
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    networks:
      - data-platform

  # Kafka Broker 2
  kafka2:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka2
    ports:
      - "9093:9093"
      - "29093:29093"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093,PLAINTEXT_HOST://localhost:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_TOOLS_LOG4J_LOGLEVEL: INFO
    volumes:
      - kafka2-data:/var/lib/kafka/data
      - ./logs/kafka2:/var/log/kafka
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9093", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    networks:
      - data-platform

  # Kafka Broker 3
  kafka3:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka3
    ports:
      - "9094:9094"
      - "29094:29094"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094,PLAINTEXT_HOST://localhost:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_TOOLS_LOG4J_LOGLEVEL: INFO
    volumes:
      - kafka3-data:/var/lib/kafka/data
      - ./logs/kafka3:/var/log/kafka
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9094", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    networks:
      - data-platform

  # Kafka-UI
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    ports:
      - "8989:8080"
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    environment:
      KAFKA_CLUSTERS_0_NAME: data-platform-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9093,kafka3:9094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
    restart: always
    networks:
      - data-platform
      
  spark-master:
    image: bitnami/spark:3.5.1
    container_name: spark-master
    ports:
      - "9090:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
      - ./spark/config:/opt/bitnami/spark/config
      - ./data/images:/opt/bitnami/spark/data/images
    networks:
      - data-platform
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  spark-worker-1:
    image: bitnami/spark:3.5.1
    container_name: spark-worker-1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
      - ./spark/config:/opt/bitnami/spark/config
      - ./data/images:/opt/bitnami/spark/data/images
    depends_on:
      - spark-master
    networks:
      - data-platform
    restart: always

  # Spark 워커 노드 2
  spark-worker-2:
    image: bitnami/spark:3.5.1
    container_name: spark-worker-2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
      - ./spark/config:/opt/bitnami/spark/config
      - ./data/images:/opt/bitnami/spark/data/images
    depends_on:
      - spark-master
    networks:
      - data-platform
    restart: always
      
  # Spark 워커 노드 3
  spark-worker-3:
    image: bitnami/spark:3.5.1
    container_name: spark-worker-3
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
    volumes:
      - ./spark/jobs:/opt/bitnami/spark/jobs
      - ./spark/config:/opt/bitnami/spark/config
      - ./data/images:/opt/bitnami/spark/data/images
    depends_on:
      - spark-master
    networks:
      - data-platform
    restart: always

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: server
    ports:
      - "8000:8000"
    volumes:
      - ./server/app:/server/app
      - ./server/tests:/server/tests
    environment:
        - ELASTICSEARCH_HOST=elasticsearch
        - ELASTICSEARCH_PORT=9200
        - SPARK_MASTER=spark://spark-master:7077
        - PYTHONPATH=/server 
        - MINIO_SERVER_ACCESS_KEY=minio-access-key
        - MINIO_SERVER_SECRET_KEY=minio-secret-key
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - data-platform
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: elasticsearch:7.17.28
    container_name: elasticsearch
    restart: always
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - bootstrap.memory_lock=true
      - indices.query.bool.max_clause_count=8192
      - http.max_content_length=100mb
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data  # 영구 데이터 저장
      - ./logs/elasticsearch:/usr/share/elasticsearch/logs  # 로그 저장
      # - ./elasticsearch/init:/usr/share/elasticsearch/init  # 초기화 스크립트
      # - ./elasticsearch/config/jvm.options:/usr/share/elasticsearch/config/jvm.options  # JVM 옵션
      # - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml  # 설정 파일
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - data-platform

  kibana:
    image: kibana:7.17.28
    container_name: kibana
    restart: always
    ports:
      - "5601:5601"  # Kibana 웹 인터페이스
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_SERVICEACCOUNTTOKEN=kibana-token
    volumes:
      - kibana-data:/usr/share/kibana/data  # 영구 데이터 저장
      - ./logs/kibana:/usr/share/kibana/logs  # 로그 저장
      # - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml  # 설정 파일
      # - ./kibana/dashboards:/usr/share/kibana/dashboards  # 대시보드
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - data-platform

  redis:
    image: redis:7.2-bookworm
    container_name: redis
    ports:
      - "6379:6379"  # Redis 포트 (외부에서 접근 가능하도록 변경)
    volumes:
      - redis-data:/data  # 영구 데이터 저장
      - ./logs/redis:/var/log/redis  # 로그 저장
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - data-platform

  minio:
    image: 'bitnami/minio:latest'
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      - MINIO_ROOT_USER=root-user
      - MINIO_ROOT_PASSWORD=root-password
    networks:
      - data-platform
    volumes:
      - minio-data:/data  # 영구 데이터 저장
      - ./logs/minio:/var/log/minio  # 로그 저장

networks:
  data-platform:
    driver: bridge
    name: image-filter-resize-service-networks

volumes:
  elasticsearch-data:
  kibana-data:
  redis-data:
  zookeeper-data:
  zookeeper-log:
  kafka1-data:
  kafka2-data:
  kafka3-data:
  minio-data: